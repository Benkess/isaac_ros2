Bootstrap: docker
From: nvcr.io/nvidia/isaac-sim:{{ISAAC_VERSION}}

%arguments
    ISAAC_VERSION=4.5.0

%environment
    export ACCEPT_EULA=Y
    export PRIVACY_CONSENT=Y
    export ROS_DISTRO=humble
    export LD_LIBRARY_PATH=/exts/isaacsim.ros2.bridge/humble/lib:$LD_LIBRARY_PATH
    export ISAAC_NUCLEUS_ROOT=/persistent/isaac/asset_root
    export ROS_SETUP=/opt/ros/$ROS_DISTRO/setup.bash

%post
    # Fix package conflicts and install base packages
    apt-get update && apt-get install -y \
      curl gnupg gnupg2 lsb-release software-properties-common \
      python3-pip python3-venv \
      locales build-essential \
    && locale-gen en_US.UTF-8 \
    && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    
    # Fix package conflicts by installing specific versions or removing conflicting repos
    apt-get update && apt-get install -y \
      --fix-broken \
      --no-install-recommends \
      libfreetype6-dev libfontconfig1-dev || \
    (apt-get install -y --fix-broken && \
     apt-get install -y --no-install-recommends libfreetype6-dev libfontconfig1-dev)

    # Add ROS 2 Humble repo
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc \
      | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] \
      http://packages.ros.org/ros2/ubuntu \
      $(lsb_release -cs) main" \
      > /etc/apt/sources.list.d/ros2.list

    # Install ROS 2 Humble desktop
    apt-get update && apt-get install -y \
        ros-humble-desktop \
        ros-dev-tools \
        python3-colcon-common-extensions

    rm -rf /var/lib/apt/lists/*

%runscript
    exec /bin/bash -lc "\
      source \$ROS_SETUP && \
      cd /isaac-sim && \
      ./isaac-sim.sh \
        --/isaac/startup/ros_bridge_extension=isaacsim.ros2.bridge \
        \"\$@\""

%labels
    Maintainer mxk3rz
    Version v0.2

%help
    This container bundles:
      • Isaac Sim & Omniverse Runtime
      • Python & NVIDIA SDKs
      • ROS 2 Humble Desktop (RViz, demos, ros2 CLI)
    Use `--overlay` to inject project‐specific packages, and `--headless` 
    or WebRTC flags for remote simulation.
    Usage example:
      apptainer exec --nv \
        --overlay ~/projects/projectX/overlay.img \
        --bind ~/projects/projectX:/home/dev/project \
        --bind ~/cache/kit:/isaac-sim/kit/cache:rw \
        --bind ~/cache/ov:/root/.cache/ov:rw \
        isaac_ros2_humble.sif \
        --headless